extend type Project {
  models(cursor: String, limit: Int! = 25, filter: ProjectModelsFilter): ModelCollection
  """
  Returns a tree of all the project's models and submodels.
  """
  structuredModels: StructuredModelCollection
  model(id: String): Model
}

type Model {
  id: ID!
  name: String!
  author: LimitedUser!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  versionCount: Int!
  previewUrl: String
  commentThreadCount: Int!
  versions(limit: Int! = 25, cursor: String): VersionCollection
}

type ModelCollection {
  totalCount: Int!
  cursor: String
  items: [Model!]!
}

type StructuredModelCollection {
  totalCount: Int!
  structure: StructuredModel
}

type StructuredModel {
  name: String!
  model: Model
  children: [StructuredModel]
}

type Version {
  id: ID!
  referencedObject: String!
  message: String
  sourceApplication: String
  authorName: String
  authorId: String
  authorAvatar: String
  createdAt: DateTime
}

type VersionCollection {
  totalCount: Int!
  cursor: String
  items: [Version!]!
}

type ModelMutations {
  create(projectId: String!, modelName: String!, modelDescription: String): String!
    @hasServerRole(role: SERVER_USER)
    @hasScope(scope: "streams:write")
  # edit(
  #   projectId: String!
  #   modelId: String!
  #   modelName: String
  #   modelDescription: String
  # ): Boolean! @hasServerRole(role: SERVER_USER) @hasScope(scope: "streams:write")
  # delete(projectId: String!, modelId: String!): Boolean!
  #   @hasServerRole(role: SERVER_USER)
  #   @hasScope(scope: "streams:write")
}

extend type Mutation {
  modelMutations: ModelMutations!
}

input ProjectModelsFilter {
  """
  Filter by source apps used in models
  """
  sourceApps: [String!]
  """
  Filter by IDs of contributors who participated in models
  """
  contributors: [String!]
}
