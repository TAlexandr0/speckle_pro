type UserEmail {
  id: ID!
  email: String!
  verified: Boolean!
  primary: Boolean!
  userId: ID!
}

extend type User {
  emails: [UserEmail!]! @isOwner
}

input CreateUserEmailInput {
  email: String!
}
input DeleteUserEmailInput {
  id: ID!
}
input SetPrimaryUserEmailInput {
  id: ID!
}

type UserEmailMutations {
  create(input: CreateUserEmailInput!): User!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "profile:email")
  delete(input: DeleteUserEmailInput!): User!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "profile:email")
  setPrimary(input: SetPrimaryUserEmailInput!): User!
    @hasServerRole(role: SERVER_GUEST)
    @hasScope(scope: "profile:email")
}

extend type ActiveUserMutations {
  emailMutations: UserEmailMutations!
}

# extend type Mutation {
# createUserEmail(input: CreateUserEmailInput!): ID!
#   @hasServerRole(role: SERVER_GUEST)
#   @hasScope(scope: "profile:email")

# deleteUserEmail(input: DeleteUserEmailInput!): Boolean!
#   @hasServerRole(role: SERVER_GUEST)
#   @hasScope(scope: "profile:email")

# setPrimaryUserEmail(input: SetPrimaryUserEmailInput!): Boolean!
#   @hasServerRole(role: SERVER_GUEST)
#   @hasScope(scope: "profile:email")
# }
