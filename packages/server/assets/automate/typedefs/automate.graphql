enum AutomateRunStatus {
  INITIALIZING
  RUNNING
  SUCCEEDED
  FAILED
}

type AutomationRevisionFunction {
  """
  The secrets in parameters are redacted
  """
  parameters: JSONObject
  release: AutomateFunctionRelease!
}

type AutomationRevision {
  id: ID!
  """
  Trigger definition schema:
  {
    version: 1.0.0,
    definitions: Array<{
      type: AutomationRunTriggerType.VERSION_CREATED,
      modelId: string | null, // null means all models
    }>
  }
  """
  triggerDefinitions: JSONObject!
  functions: [AutomationRevisionFunction!]!
}

enum AutomationRunTriggerType {
  VERSION_CREATED
}

type AutomationRunTrigger {
  type: AutomationRunTriggerType!
  version: Version
  model: Model
}

type Automation {
  id: ID!
  name: String!
  enabled: Boolean!
  runs(cursor: String, limit: Int): AutomateRunCollection!
  currentRevision: AutomationRevision
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AutomateRun {
  id: ID!
  trigger: AutomationRunTrigger!
  status: AutomateRunStatus!
  reason: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AutomateRunCollection {
  items: [AutomateRun!]!
  totalCount: Int!
  cursor: String
}

type AutomationCollection {
  items: [Automation!]!
  totalCount: Int!
  cursor: String
}

input AutomateFunctionReleasesFilter {
  search: String
}

type AutomateFunction {
  id: ID!
  name: String!
  repoUrl: String!
  creator: LimitedUser!
  isFeatured: Boolean!
  description: String!
  logo: String
  releases(
    cursor: String
    limit: Int
    filter: AutomateFunctionReleasesFilter
  ): AutomateFunctionReleaseCollection!
  automationCount: Int!
}

type AutomateFunctionRelease {
  id: ID!
  function: AutomateFunction!
  versionTag: String!
  createdAt: DateTime!
  inputSchema: JSONObject
  commitId: String!
}

type AutomateFunctionReleaseCollection {
  items: [AutomateFunctionRelease!]!
  totalCount: Int!
  cursor: String
}

type AutomateFunctionCollection {
  items: [AutomateFunction!]!
  totalCount: Int!
  cursor: String
}

extend type Project {
  automations(filter: String, cursor: String, limit: Int): AutomationCollection!
  automation(id: String!): Automation
}

input ProjectAutomationUpdateInput {
  id: ID!
  name: String
}

input AutomationRevisionCreateFunctionInput {
  functionId: String!
  releaseId: String!
  """
  Should be encrypted from the client side
  """
  parameters: String
}

input ProjectAutomationRevisionCreateInput {
  automationId: ID!
  triggerDefinitions: JSONObject! # See triggerDefinitions schema above
  functions: [AutomationRevisionCreateFunctionInput!]!
}

type ProjectAutomationMutations {
  update(input: ProjectAutomationUpdateInput!): Automation
  createRevision(input: ProjectAutomationRevisionCreateInput!): AutomationRevision
}

extend type ProjectMutations {
  automationMutations(projectId: ID!): ProjectAutomationMutations!
}

input AutomateFunctionsFilter {
  search: String
}

extend type Query {
  automateFunctions(
    filter: AutomateFunctionsFilter
    cursor: String
    limit: Int
  ): AutomateFunctionCollection!
  automateFunction(id: ID!): AutomateFunction
}

input AutomateFunctionRunStatusReportInput {
  functionRunId: String!
  status: AutomationRunStatus!
  statusMessage: String
  contextView: String
  """
  NOTE: this is the schema for the results field below!
  Current schema: {
    version: "1.0.0",
    values: {
      objectResults: Record<str, {
        category: string
        level: ObjectResultLevel
        objectIds: string[]
        message: str | null
        metadata: Records<str, unknown> | null
        visualoverrides: Records<str, unknown> | null
      }[]>
      blobIds?: string[]
    }
  }
  """
  results: JSONObject
}

extend type Mutation {
  automateFunctionRunStatusReport(
    input: AutomateFunctionRunStatusReportInput!
  ): Boolean!
}
